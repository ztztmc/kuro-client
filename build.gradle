plugins {
	id "fabric-loom" version "${loom_version}"
	id "legacy-looming" version "${loom_version}" // Version must be the same as fabric-loom's
	id "maven-publish"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://jitpack.io' }
	mavenCentral()
	maven {
		name = "cursed-mappings"
		url = "https://raw.githubusercontent.com/BleachDev/cursed-mappings/main/"
	}
}

loom {
	// Only needed for versions not available from vanilla launcher by default.
	// customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

	// Required by 1.7.x
	// runs {
	// 	client {
	// 		programArgs "--userProperties", "{}"
	// 	}
	// }
}

legacyLooming {
	// 	The generation of intermediary to use, default is 1.
	// 	legacy.yarn() will automatically point at the variant for the set intermediary generation.
	// 	However do not forget to set the right build number of legacy yarn as they are different per variant.
	//	intermediaryVersion = 2

	// 	Wether to use Legacy Fabric intermediaries or Upstream/Official FabricMC ones.
	//	Default to true: use Legacy Fabric intermediaries.
	// 	If setting to false, don't forget to also set intermediaryVersion to generation 2.
	//	useLFIntermediary.set(false)
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(legacy.yarn(project.minecraft_version, project.yarn_build))
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Legacy Fabric API provides hooks for events, item registration, and more. As most mods will need this, it's included by default.
	// If you know for a fact you don't, it's not required and can be safely removed.
	// As of September 2024, available for MC 1.6.4, 1.7.10, 1.8, 1.8.9, 1.9.4, 1.10.2, 1.11.2 and 1.12.2.
	// As of September 2024, available only for intermediary generation 1.
	modImplementation "net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}"

	// You can retrieve a specific api module using this notation.
	// modImplementation(legacy.apiModule("legacy-fabric-item-groups-v1", project.fabric_version))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}